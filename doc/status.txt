Wed Jun  5 02:05:33 UTC 2019

Tue Sep  1 14:59:24 UTC 2020

Status of CamelForth projects by wa1tnr - June 2019

MISSING software usart emulation (bit-banged) was just
re-discovered on 01 Sep 2020.

https://github.com/wa1tnr/ainsuForth-d51/blob/2020-soft-usart-FOUND-b/main.c

It was there all along, but on a side branch.

Older text from previous version of this file, follows.

 - - -

A quick survey suggests that the QSPI flashROM
work was done last for NeoTrellis M4 (SAMD51)
and was based in YAFFA (only).

This makes it appear there is no Arduino IDE based
port of CamelForth as of June 1, 2019 (by wa1tnr).

Other programmers may've done so (unknown!)

TODO: Port CamelForth to Arduino IDE in the most
rudamentary way (with as little changes to the
upstream code as is practical).

From there, consider adding QSPI flashROM support
(from existing published sources on github by
other programmers).


 - - -

As far as can be determined (quickly!) all CamelForth
ports by wa1tnr, to date, are based in AtmelStart.
That's as of 1 June 2019.

The AtmelStart based programming began with the USART
and (most likely) SAMD21.  The basic goal there was to
create a primitive text interpreter from within the
AtmelStart context.  This work was done near June 2018
(last year).

A hardware driver was written from scratch, with help
from an oscilloscope (as well as the Silabs USB to UART
bridge chip - in this instance, a PiUART (spelling?)).
The driver produced did not read remote keyboard input
(from a human at a serial terminal) but rather, dumped
data from the SAMD target, via the TX/RX pair, through
the UART to USB bridge, and then to the human at the
terminal (connected via USB).

CP2104 is that bridge chip.

 - - -

Later it was apparent that direct USB was going to be
an approach worth trying (it worked!)  whereas earlier,
the UART hardware driver was tried on the notion that
doing USB was going to be too steep of a learning curve.

Eventually, USB became the usual method employed (CDC ACM)
and the UART hardware driver work was (not abandoned, but)
tabled.  That project still needs to read the UART to
acquire keystrokes fed to a Forth interpreter (under AtmelStart,
and not using CDC ACM USB stuff).

The USB work was limited to about 5 byte utterances with
good fidelity.  Some type of ring buffer was next on the
list of improvements, but that work has yet to occur in
June 2019.

A ring buffer would function pretty much the same as the
stack in Shattuck's forth-like interpreter (for SAMD21).

However, it would conform (here, in AtmelStart) more to
the AtmelStart code base approach and technique wrt
buffer management.  Examined code (from elsewhere) had
exhibited complexities to be factored out (and in observing
this, the (local) project stalled, around November 2018).

CamelForth worked well enough under USB (CDC ACM, AtmelStart)
to be useful to an end user, but just barely.  A string
'chopper' routine was conceived to meet the (approx.) five
byte limit of the existing technique, with fairly good
fidelity.  Speed was traded for low (or no) character
transmission loss.

 - - -

The Arduino IDE port of CamelForth was so firmly thought
of that it was a surprise that the work hadn't been done.
Not really sure why it wasn't done; seemed almost trivial
to do the port (will see if that's remotely true, when it
is done).

Most likely sidetracked by recent (i.e. November 2018)
QSPI flashROM efforts, which would have occured on an
existing port rather than a new Arduino IDE port.  So
it would appear that it is time to do the Arduino IDE
work on CamelForth, as a first effort towards supporting
QSPI flashROM (and fatfs, most likely) for CamelForth
on the SAMD51 platform.
